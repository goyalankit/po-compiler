digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x9c1e420 [shape=record,label="{entry:\l  %retval = alloca i32, align 4\l  %argc.addr = alloca i32, align 4\l  %argv.addr = alloca i8**, align 8\l  %print_hash_value = alloca i32, align 4\l  store i32 0, i32* %retval\l  store i32 %argc, i32* %argc.addr, align 4\l  store i8** %argv, i8*** %argv.addr, align 8\l  store i32 0, i32* %print_hash_value, align 4\l  %0 = load i32* %argc.addr, align 4\l  %cmp = icmp eq i32 %0, 2\l  br i1 %cmp, label %land.lhs.true, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x9c1e420:s0 -> Node0x9c1d370;
	Node0x9c1e420:s1 -> Node0x9c1d3d0;
	Node0x9c1d370 [shape=record,label="{land.lhs.true:                                    \l  %1 = load i8*** %argv.addr, align 8\l  %arrayidx = getelementptr inbounds i8** %1, i64 1\l  %2 = load i8** %arrayidx, align 8\l  %call = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([2 x i8]*\l... @.str, i32 0, i32 0)) #4\l  %cmp1 = icmp eq i32 %call, 0\l  br i1 %cmp1, label %if.then, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0x9c1d370:s0 -> Node0x9c1d3a0;
	Node0x9c1d370:s1 -> Node0x9c1d3d0;
	Node0x9c1d3a0 [shape=record,label="{if.then:                                          \l  store i32 1, i32* %print_hash_value, align 4\l  br label %if.end\l}"];
	Node0x9c1d3a0 -> Node0x9c1d3d0;
	Node0x9c1d3d0 [shape=record,label="{if.end:                                           \l  call void @platform_main_begin()\l  call void @crc32_gentab()\l  %call2 = call i32 @func_1()\l  %3 = load volatile i16* @g_2, align 2\l  %conv = sext i16 %3 to i64\l  %4 = load i32* %print_hash_value, align 4\l  call void @transparent_crc(i64 %conv, i8* getelementptr inbounds ([4 x i8]*\l... @.str1, i32 0, i32 0), i32 %4)\l  %5 = load volatile i32* @g_4, align 4\l  %conv3 = sext i32 %5 to i64\l  %6 = load i32* %print_hash_value, align 4\l  call void @transparent_crc(i64 %conv3, i8* getelementptr inbounds ([4 x i8]*\l... @.str2, i32 0, i32 0), i32 %6)\l  %7 = load i32* @crc32_context, align 4\l  %conv4 = zext i32 %7 to i64\l  %xor = xor i64 %conv4, 4294967295\l  %conv5 = trunc i64 %xor to i32\l  %8 = load i32* %print_hash_value, align 4\l  call void @platform_main_end(i32 %conv5, i32 %8)\l  ret i32 0\l}"];
}
