digraph "CFG for 'func_2' function" {
	label="CFG for 'func_2' function";

	Node0xb7d5178 [shape=record,label="{entry:\l  %p_3 = alloca %union.U0, align 2\l  %p_4.addr = alloca i16, align 2\l  %p_5.addr = alloca i32*, align 8\l  %p_6.addr = alloca i64, align 8\l  %p_7.addr = alloca i32*, align 8\l  %l_3753 = alloca i32, align 4\l  %l_3762 = alloca i16*, align 8\l  %l_3763 = alloca [4 x [10 x i16*]], align 16\l  %l_3766 = alloca i32, align 4\l  %l_3767 = alloca i64*, align 8\l  %l_3768 = alloca i32*, align 8\l  %l_3775 = alloca i64**, align 8\l  %l_3776 = alloca i64***, align 8\l  %l_3777 = alloca i64***, align 8\l  %l_3785 = alloca i16, align 2\l  %l_3797 = alloca i32****, align 8\l  %l_3798 = alloca i8*, align 8\l  %l_3799 = alloca i8*, align 8\l  %l_3800 = alloca i32, align 4\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %coerce.dive = getelementptr %union.U0* %p_3, i32 0, i32 0\l  store i16 %p_3.coerce, i16* %coerce.dive\l  store i16 %p_4, i16* %p_4.addr, align 2\l  store i32* %p_5, i32** %p_5.addr, align 8\l  store i64 %p_6, i64* %p_6.addr, align 8\l  store i32* %p_7, i32** %p_7.addr, align 8\l  store i32 444033430, i32* %l_3753, align 4\l  store i16* null, i16** %l_3762, align 8\l  %0 = bitcast [4 x [10 x i16*]]* %l_3763 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([4 x [10 x i16*]]*\l... @func_2.l_3763 to i8*), i64 320, i32 16, i1 false)\l  store i32 1065277946, i32* %l_3766, align 4\l  store i64* getelementptr inbounds ([5 x [1 x i64]]* @g_378, i32 0, i64 3,\l... i64 0), i64** %l_3767, align 8\l  store i32* @g_340, i32** %l_3768, align 8\l  store i64** getelementptr inbounds ([1 x [2 x [2 x i64*]]]* @g_3389, i32 0,\l... i64 0, i64 1, i64 0), i64*** %l_3775, align 8\l  store i64*** null, i64**** %l_3776, align 8\l  store i64*** %l_3775, i64**** %l_3777, align 8\l  store i16 -1, i16* %l_3785, align 2\l  store i32**** @g_651, i32***** %l_3797, align 8\l  store i8* null, i8** %l_3798, align 8\l  store i8* getelementptr inbounds ([1 x i8]* @g_160, i32 0, i64 0), i8**\l... %l_3799, align 8\l  store i32 1928731177, i32* %l_3800, align 4\l  %f0 = bitcast %union.U0* %p_3 to i16*\l  %1 = load i16* %f0, align 2\l  %2 = load i32* %l_3753, align 4\l  %conv = zext i32 %2 to i64\l  %3 = load i32* %l_3753, align 4\l  %4 = load i32* %l_3753, align 4\l  %conv1 = zext i32 %4 to i64\l  %call = call i64 @safe_add_func_int64_t_s_s(i64 %conv1, i64 0)\l  %conv2 = trunc i64 %call to i16\l  %call3 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %conv2,\l... i32 10)\l  %conv4 = zext i16 %call3 to i32\l  %5 = load i32* %l_3753, align 4\l  %cmp = icmp uge i32 %conv4, %5\l  %conv5 = zext i1 %cmp to i32\l  %6 = load i16** @g_912, align 8\l  %7 = load i16* %6, align 2\l  %dec = add i16 %7, -1\l  store i16 %dec, i16* %6, align 2\l  store i16 %7, i16* @g_299, align 2\l  %conv6 = zext i16 %7 to i32\l  %cmp7 = icmp slt i32 %conv5, %conv6\l  %conv8 = zext i1 %cmp7 to i32\l  %8 = load volatile i64* @g_2655, align 8\l  %f09 = bitcast %union.U0* %p_3 to i16*\l  %9 = load i16* %f09, align 2\l  %10 = load i32* %l_3753, align 4\l  store i32 %10, i32* %l_3766, align 4\l  %conv10 = trunc i32 %10 to i8\l  %call11 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext %conv10,\l... i32 4)\l  %11 = load i32* %l_3753, align 4\l  %conv12 = zext i32 %11 to i64\l  %cmp13 = icmp eq i64 %8, %conv12\l  %conv14 = zext i1 %cmp13 to i32\l  %conv15 = sext i32 %conv14 to i64\l  %cmp16 = icmp ult i64 %conv15, -4139341862040643493\l  %conv17 = zext i1 %cmp16 to i32\l  %cmp18 = icmp ugt i32 %3, %conv17\l  %conv19 = zext i1 %cmp18 to i32\l  %conv20 = sext i32 %conv19 to i64\l  %cmp21 = icmp eq i64 %conv20, -318940161680141085\l  %conv22 = zext i1 %cmp21 to i32\l  %conv23 = sext i32 %conv22 to i64\l  %cmp24 = icmp ule i64 %conv, %conv23\l  %conv25 = zext i1 %cmp24 to i32\l  %conv26 = sext i32 %conv25 to i64\l  %cmp27 = icmp eq i64 %conv26, 1599624542\l  %conv28 = zext i1 %cmp27 to i32\l  %conv29 = sext i32 %conv28 to i64\l  %12 = load i64** @g_684, align 8\l  store i64 %conv29, i64* %12, align 8\l  %13 = load i64** %l_3767, align 8\l  store i64 %conv29, i64* %13, align 8\l  %call30 = call i64 @safe_add_func_int64_t_s_s(i64 %conv29, i64 0)\l  %tobool = icmp ne i64 %call30, 0\l  br i1 %tobool, label %land.rhs, label %land.end\l|{<s0>T|<s1>F}}"];
	Node0xb7d5178:s0 -> Node0xb7d51a8;
	Node0xb7d5178:s1 -> Node0xb7d51d8;
	Node0xb7d51a8 [shape=record,label="{land.rhs:                                         \l  br label %land.end\l}"];
	Node0xb7d51a8 -> Node0xb7d51d8;
	Node0xb7d51d8 [shape=record,label="{land.end:                                         \l  %14 = phi i1 [ false, %entry ], [ true, %land.rhs ]\l  %land.ext = zext i1 %14 to i32\l  %conv31 = trunc i32 %land.ext to i16\l  %call32 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %conv31,\l... i16 signext -9381)\l  %15 = load i32** %l_3768, align 8\l  %cmp33 = icmp ne i32* %l_3753, %15\l  %conv34 = zext i1 %cmp33 to i32\l  %conv35 = trunc i32 %conv34 to i16\l  %call36 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %conv35,\l... i16 zeroext -1)\l  %16 = load i64* %p_6.addr, align 8\l  %17 = load i64* %p_6.addr, align 8\l  %cmp37 = icmp eq i64 %16, %17\l  %conv38 = zext i1 %cmp37 to i32\l  %18 = load i32** %p_7.addr, align 8\l  store i32 %conv38, i32* %18, align 4\l  %19 = load i32* %l_3766, align 4\l  %call39 = call i32 @safe_mod_func_int32_t_s_s(i32 0, i32 %19)\l  %20 = load i64*** %l_3775, align 8\l  %21 = load i64**** %l_3777, align 8\l  store i64** %20, i64*** %21, align 8\l  %22 = load i32* %l_3753, align 4\l  %call40 = call i32 @safe_add_func_int32_t_s_s(i32 %22, i32 -352864143)\l  %tobool41 = icmp ne i32 %call40, 0\l  br i1 %tobool41, label %land.rhs42, label %land.end50\l|{<s0>T|<s1>F}}"];
	Node0xb7d51d8:s0 -> Node0xb7d5208;
	Node0xb7d51d8:s1 -> Node0xb7d5238;
	Node0xb7d5208 [shape=record,label="{land.rhs42:                                       \l  %call43 = call i64 @safe_unary_minus_func_int64_t_s(i64 -7)\l  %23 = load i32* %l_3753, align 4\l  %24 = load i16* %p_4.addr, align 2\l  %conv44 = zext i16 %24 to i32\l  %xor = xor i32 %23, %conv44\l  %conv45 = zext i32 %xor to i64\l  %cmp46 = icmp slt i64 %call43, %conv45\l  %conv47 = zext i1 %cmp46 to i32\l  %25 = load i32* %l_3766, align 4\l  %cmp48 = icmp eq i32 %conv47, %25\l  br label %land.end50\l}"];
	Node0xb7d5208 -> Node0xb7d5238;
	Node0xb7d5238 [shape=record,label="{land.end50:                                       \l  %26 = phi i1 [ false, %land.end ], [ %cmp48, %land.rhs42 ]\l  %land.ext51 = zext i1 %26 to i32\l  %conv52 = trunc i32 %land.ext51 to i16\l  %27 = load i64* getelementptr inbounds ([5 x [1 x i64]]* @g_378, i32 0, i64\l... 0, i64 0), align 8\l  %conv53 = trunc i64 %27 to i16\l  %call54 = call zeroext i16 @safe_div_func_uint16_t_u_u(i16 zeroext %conv52,\l... i16 zeroext %conv53)\l  %conv55 = trunc i16 %call54 to i8\l  %call56 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %conv55, i8\l... signext 1)\l  %cmp57 = icmp ne i64** %20, null\l  %conv58 = zext i1 %cmp57 to i32\l  %f059 = bitcast %union.U0* %p_3 to i16*\l  %28 = load i16* %f059, align 2\l  %conv60 = zext i16 %28 to i32\l  %xor61 = xor i32 %conv58, %conv60\l  %call62 = call i32 @safe_add_func_int32_t_s_s(i32 %call39, i32 %xor61)\l  %conv63 = trunc i32 %call62 to i16\l  %29 = load i32* %l_3766, align 4\l  %conv64 = trunc i32 %29 to i16\l  %call65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %conv63,\l... i16 signext %conv64)\l  %conv66 = sext i16 %call65 to i32\l  %f067 = bitcast %union.U0* %p_3 to i16*\l  %30 = load i16* %f067, align 2\l  %conv68 = zext i16 %30 to i32\l  %cmp69 = icmp sle i32 %conv66, %conv68\l  %conv70 = zext i1 %cmp69 to i32\l  store i32 %conv70, i32* %l_3766, align 4\l  %31 = load i16* %l_3785, align 2\l  %conv71 = sext i16 %31 to i64\l  %32 = load i64****** @g_3737, align 8\l  %33 = load i64***** %32, align 8\l  %34 = load i64* %p_6.addr, align 8\l  %35 = load i32* %l_3766, align 4\l  %36 = load i8** @g_1919, align 8\l  %37 = load i8* %36, align 1\l  %conv72 = sext i8 %37 to i32\l  %cmp73 = icmp sgt i32 %35, %conv72\l  %conv74 = zext i1 %cmp73 to i32\l  %conv75 = sext i32 %conv74 to i64\l  %or = or i64 %34, %conv75\l  %call76 = call i64 @safe_unary_minus_func_uint64_t_u(i64 %or)\l  %38 = load i32* %l_3766, align 4\l  %cmp77 = icmp ne i64**** %l_3776, null\l  %conv78 = zext i1 %cmp77 to i32\l  %and = and i32 %38, %conv78\l  %39 = load i32***** %l_3797, align 8\l  %cmp79 = icmp eq i32**** null, %39\l  %conv80 = zext i1 %cmp79 to i32\l  %conv81 = sext i32 %conv80 to i64\l  %or82 = or i64 %call76, %conv81\l  %cmp83 = icmp ne i64 %or82, 38788\l  br i1 %cmp83, label %land.rhs85, label %land.end87\l|{<s0>T|<s1>F}}"];
	Node0xb7d5238:s0 -> Node0xb7d5268;
	Node0xb7d5238:s1 -> Node0xb7d5298;
	Node0xb7d5268 [shape=record,label="{land.rhs85:                                       \l  %40 = load i64* %p_6.addr, align 8\l  %tobool86 = icmp ne i64 %40, 0\l  br label %land.end87\l}"];
	Node0xb7d5268 -> Node0xb7d5298;
	Node0xb7d5298 [shape=record,label="{land.end87:                                       \l  %41 = phi i1 [ false, %land.end50 ], [ %tobool86, %land.rhs85 ]\l  %land.ext88 = zext i1 %41 to i32\l  %conv89 = sext i32 %land.ext88 to i64\l  %cmp90 = icmp sge i64 %conv89, -8\l  %conv91 = zext i1 %cmp90 to i32\l  %42 = load i32** %p_7.addr, align 8\l  %43 = load i32* %42, align 4\l  %call92 = call i32 @safe_add_func_int32_t_s_s(i32 %conv91, i32 %43)\l  %44 = load i8** %l_3799, align 8\l  %45 = load i8* %44, align 1\l  %conv93 = sext i8 %45 to i32\l  %xor94 = xor i32 %conv93, %call92\l  %conv95 = trunc i32 %xor94 to i8\l  store i8 %conv95, i8* %44, align 1\l  %cmp96 = icmp eq i64**** %33, %l_3776\l  %conv97 = zext i1 %cmp96 to i32\l  %conv98 = sext i32 %conv97 to i64\l  %cmp99 = icmp sgt i64 %conv98, 606187894\l  %conv100 = zext i1 %cmp99 to i32\l  %conv101 = trunc i32 %conv100 to i16\l  %call102 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext\l... %conv101, i32 15)\l  %conv103 = zext i16 %call102 to i64\l  %46 = load i64* %p_6.addr, align 8\l  %cmp104 = icmp eq i64 %conv103, %46\l  %conv105 = zext i1 %cmp104 to i32\l  %conv106 = trunc i32 %conv105 to i16\l  %call107 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %conv106,\l... i16 signext 8311)\l  %47 = load i32***** %l_3797, align 8\l  %cmp108 = icmp eq i32**** %47, null\l  %conv109 = zext i1 %cmp108 to i32\l  %conv110 = sext i32 %conv109 to i64\l  %48 = load i64* %p_6.addr, align 8\l  %call111 = call i64 @safe_mod_func_int64_t_s_s(i64 %conv110, i64 %48)\l  %cmp112 = icmp slt i64 %conv71, %call111\l  %conv113 = zext i1 %cmp112 to i32\l  %49 = load i16* %p_4.addr, align 2\l  %conv114 = zext i16 %49 to i32\l  %cmp115 = icmp sgt i32 %conv113, %conv114\l  %conv116 = zext i1 %cmp115 to i32\l  %conv117 = sext i32 %conv116 to i64\l  %and118 = and i64 %conv117, 1\l  %conv119 = trunc i64 %and118 to i32\l  %50 = load i32** %p_5.addr, align 8\l  store i32 %conv119, i32* %50, align 4\l  %51 = load i32* %l_3800, align 4\l  %xor120 = xor i32 %51, %conv119\l  store i32 %xor120, i32* %l_3800, align 4\l  %52 = load i32** %p_5.addr, align 8\l  ret i32* %52\l}"];
}
