digraph "CFG for 'func_13' function" {
	label="CFG for 'func_13' function";

	Node0xaad1b78 [shape=record,label="{entry:\l  %retval = alloca i16, align 2\l  %p_14.addr = alloca i16, align 2\l  %p_15.addr = alloca i32, align 4\l  %l_2789 = alloca %union.U0*, align 8\l  %l_2791 = alloca i16**, align 8\l  %l_2801 = alloca i64*, align 8\l  %l_2861 = alloca i32, align 4\l  %l_2863 = alloca i16, align 2\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %l_2793 = alloca [6 x i32], align 16\l  %l_2794 = alloca i32, align 4\l  %l_2798 = alloca i16, align 2\l  %l_2810 = alloca i64****, align 8\l  %l_2823 = alloca i32**, align 8\l  %i1 = alloca i32, align 4\l  %l_2792 = alloca [7 x i16**], align 16\l  %l_2795 = alloca i16*, align 8\l  %l_2821 = alloca i32, align 4\l  %l_2862 = alloca [4 x i32], align 16\l  %i3 = alloca i32, align 4\l  %l_2803 = alloca [5 x [3 x i64***]], align 16\l  %l_2802 = alloca i64****, align 8\l  %l_2811 = alloca i64*****, align 8\l  %l_2822 = alloca i32, align 4\l  %l_2860 = alloca i8*, align 8\l  %i26 = alloca i32, align 4\l  %j27 = alloca i32, align 4\l  %k = alloca i32, align 4\l  store i16 %p_14, i16* %p_14.addr, align 2\l  store i32 %p_15, i32* %p_15.addr, align 4\l  store %union.U0* @g_2741, %union.U0** %l_2789, align 8\l  store i16** @g_1207, i16*** %l_2791, align 8\l  store i64* @g_908, i64** %l_2801, align 8\l  store i32 -5, i32* %l_2861, align 4\l  store i16 9, i16* %l_2863, align 2\l  %0 = load volatile i32** @g_157, align 8\l  %1 = load i32* %0, align 4\l  %tobool = icmp ne i32 %1, 0\l  br i1 %tobool, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0xaad1b78:s0 -> Node0xaad1ba8;
	Node0xaad1b78:s1 -> Node0xaad1bd8;
	Node0xaad1ba8 [shape=record,label="{if.then:                                          \l  %2 = load i8* getelementptr inbounds ([2 x [8 x i8]]* @func_13.l_2786, i32\l... 0, i64 0, i64 7), align 1\l  %conv = zext i8 %2 to i16\l  store i16 %conv, i16* %retval\l  br label %return\l}"];
	Node0xaad1ba8 -> Node0xaad1fc8;
	Node0xaad1bd8 [shape=record,label="{if.else:                                          \l  %3 = bitcast [6 x i32]* %l_2793 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([6 x i32]*\l... @func_13.l_2793 to i8*), i64 24, i32 16, i1 false)\l  store i32 1216761122, i32* %l_2794, align 4\l  store i16 1709, i16* %l_2798, align 2\l  store i64**** null, i64***** %l_2810, align 8\l  store i32** getelementptr inbounds ([7 x i32*]* @g_611, i32 0, i64 4),\l... i32*** %l_2823, align 8\l  store i64 0, i64* @g_2389, align 8\l  br label %for.cond\l}"];
	Node0xaad1bd8 -> Node0xaad1c08;
	Node0xaad1c08 [shape=record,label="{for.cond:                                         \l  %4 = load i64* @g_2389, align 8\l  %cmp = icmp ne i64 %4, 18\l  br i1 %cmp, label %for.body, label %for.end98\l|{<s0>T|<s1>F}}"];
	Node0xaad1c08:s0 -> Node0xaad1c38;
	Node0xaad1c08:s1 -> Node0xaad1f68;
	Node0xaad1c38 [shape=record,label="{for.body:                                         \l  store i16* @g_750, i16** %l_2795, align 8\l  store i32 -8, i32* %l_2821, align 4\l  %5 = bitcast [4 x i32]* %l_2862 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* bitcast ([4 x i32]*\l... @func_13.l_2862 to i8*), i64 16, i32 16, i1 false)\l  store i32 0, i32* %i3, align 4\l  br label %for.cond4\l}"];
	Node0xaad1c38 -> Node0xaad1c68;
	Node0xaad1c68 [shape=record,label="{for.cond4:                                        \l  %6 = load i32* %i3, align 4\l  %cmp5 = icmp slt i32 %6, 7\l  br i1 %cmp5, label %for.body7, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0xaad1c68:s0 -> Node0xaad1c98;
	Node0xaad1c68:s1 -> Node0xaad1cf8;
	Node0xaad1c98 [shape=record,label="{for.body7:                                        \l  %7 = load i32* %i3, align 4\l  %idxprom = sext i32 %7 to i64\l  %arrayidx = getelementptr inbounds [7 x i16**]* %l_2792, i32 0, i64 %idxprom\l  store i16** @g_1207, i16*** %arrayidx, align 8\l  br label %for.inc\l}"];
	Node0xaad1c98 -> Node0xaad1cc8;
	Node0xaad1cc8 [shape=record,label="{for.inc:                                          \l  %8 = load i32* %i3, align 4\l  %inc = add nsw i32 %8, 1\l  store i32 %inc, i32* %i3, align 4\l  br label %for.cond4\l}"];
	Node0xaad1cc8 -> Node0xaad1c68;
	Node0xaad1cf8 [shape=record,label="{for.end:                                          \l  %9 = load %union.U0** %l_2789, align 8\l  %10 = load volatile %union.U0*** @g_2790, align 8\l  store %union.U0* %9, %union.U0** %10, align 8\l  %11 = load i16*** %l_2791, align 8\l  %arrayidx8 = getelementptr inbounds [7 x i16**]* %l_2792, i32 0, i64 5\l  %12 = load i16*** %arrayidx8, align 8\l  %cmp9 = icmp ne i16** %11, %12\l  %conv10 = zext i1 %cmp9 to i32\l  %13 = load i32** @g_1613, align 8\l  store i32 %conv10, i32* %13, align 4\l  %arrayidx11 = getelementptr inbounds [6 x i32]* %l_2793, i32 0, i64 2\l  %14 = load i32* %arrayidx11, align 4\l  %conv12 = sext i32 %14 to i64\l  %or = or i64 %conv12, 1836487110\l  %conv13 = trunc i64 %or to i32\l  store i32 %conv13, i32* %arrayidx11, align 4\l  %15 = load i16** %l_2795, align 8\l  %16 = load i16* %15, align 2\l  %inc14 = add i16 %16, 1\l  store i16 %inc14, i16* %15, align 2\l  %conv15 = zext i16 %16 to i32\l  %17 = load i16* %l_2798, align 2\l  %conv16 = zext i16 %17 to i32\l  %cmp17 = icmp eq i32 %conv15, %conv16\l  %conv18 = zext i1 %cmp17 to i32\l  %cmp19 = icmp sgt i32 %conv13, %conv18\l  %conv20 = zext i1 %cmp19 to i32\l  %conv21 = sext i32 %conv20 to i64\l  %and = and i64 7, %conv21\l  %tobool22 = icmp ne i64 %and, 0\l  br i1 %tobool22, label %if.then23, label %if.else89\l|{<s0>T|<s1>F}}"];
	Node0xaad1cf8:s0 -> Node0xaad1d28;
	Node0xaad1cf8:s1 -> Node0xaad1e18;
	Node0xaad1d28 [shape=record,label="{if.then23:                                        \l  %18 = bitcast [5 x [3 x i64***]]* %l_2803 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* bitcast ([5 x [3 x\l... i64***]]* @func_13.l_2803 to i8*), i64 120, i32 16, i1 false)\l  %arrayidx24 = getelementptr inbounds [5 x [3 x i64***]]* %l_2803, i32 0, i64\l... 0\l  %arrayidx25 = getelementptr inbounds [3 x i64***]* %arrayidx24, i32 0, i64 2\l  store i64**** %arrayidx25, i64***** %l_2802, align 8\l  store i64***** %l_2810, i64****** %l_2811, align 8\l  store i32 1, i32* %l_2822, align 4\l  store i8* null, i8** %l_2860, align 8\l  %19 = load i64** %l_2801, align 8\l  %cmp28 = icmp eq i64* %19, null\l  %conv29 = zext i1 %cmp28 to i32\l  %conv30 = trunc i32 %conv29 to i16\l  %20 = load i16* %p_14.addr, align 2\l  %conv31 = sext i16 %20 to i32\l  %tobool32 = icmp ne i32 %conv31, 0\l  br i1 %tobool32, label %lor.end, label %lor.rhs\l|{<s0>T|<s1>F}}"];
	Node0xaad1d28:s0 -> Node0xaad1d88;
	Node0xaad1d28:s1 -> Node0xaad1d58;
	Node0xaad1d58 [shape=record,label="{lor.rhs:                                          \l  %21 = load i64***** @g_1665, align 8\l  %22 = load i64**** %21, align 8\l  %23 = load i64***** @g_1665, align 8\l  store i64*** %22, i64**** %23, align 8\l  %24 = load i64***** %l_2802, align 8\l  store i64*** %22, i64**** %24, align 8\l  %25 = load i64***** @g_2506, align 8\l  %26 = load volatile i64**** %25, align 8\l  %cmp33 = icmp ne i64*** %22, %26\l  %conv34 = zext i1 %cmp33 to i32\l  %conv35 = sext i32 %conv34 to i64\l  %27 = load i64** @g_396, align 8\l  %28 = load i64* %27, align 8\l  %xor = xor i64 %28, %conv35\l  store i64 %xor, i64* %27, align 8\l  %tobool36 = icmp ne i64 %xor, 0\l  br label %lor.end\l}"];
	Node0xaad1d58 -> Node0xaad1d88;
	Node0xaad1d88 [shape=record,label="{lor.end:                                          \l  %29 = phi i1 [ true, %if.then23 ], [ %tobool36, %lor.rhs ]\l  %lor.ext = zext i1 %29 to i32\l  %30 = load i64***** %l_2810, align 8\l  %31 = load i64****** %l_2811, align 8\l  store i64**** %30, i64***** %31, align 8\l  %32 = load i64***** @g_1665, align 8\l  store i64**** %32, i64***** getelementptr inbounds ([9 x [4 x i64****]]*\l... @g_2812, i32 0, i64 5, i64 0), align 8\l  %cmp37 = icmp eq i64**** %30, %32\l  %conv38 = zext i1 %cmp37 to i32\l  %conv39 = trunc i32 %conv38 to i8\l  %33 = load i8** getelementptr inbounds ([5 x [8 x [3 x i8*]]]*\l... @func_13.l_2820, i32 0, i64 3, i64 6, i64 2), align 8\l  %cmp40 = icmp ne i8* null, %33\l  %conv41 = zext i1 %cmp40 to i32\l  %arrayidx42 = getelementptr inbounds [6 x i32]* %l_2793, i32 0, i64 2\l  %34 = load i32* %arrayidx42, align 4\l  %cmp43 = icmp sle i32 %conv41, %34\l  %conv44 = zext i1 %cmp43 to i32\l  %conv45 = trunc i32 %conv44 to i16\l  %35 = load i32* %p_15.addr, align 4\l  %conv46 = trunc i32 %35 to i16\l  %call = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %conv45,\l... i16 zeroext %conv46)\l  %conv47 = zext i16 %call to i64\l  %36 = load i32* %p_15.addr, align 4\l  %conv48 = sext i32 %36 to i64\l  %call49 = call i64 @safe_sub_func_int64_t_s_s(i64 %conv47, i64 %conv48)\l  %arrayidx50 = getelementptr inbounds [6 x i32]* %l_2793, i32 0, i64 2\l  %37 = load i32* %arrayidx50, align 4\l  %conv51 = trunc i32 %37 to i16\l  %call52 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %conv51,\l... i16 zeroext -10)\l  %conv53 = zext i16 %call52 to i32\l  %tobool54 = icmp ne i32 %conv53, 0\l  br i1 %tobool54, label %lor.end57, label %lor.rhs55\l|{<s0>T|<s1>F}}"];
	Node0xaad1d88:s0 -> Node0xaad1de8;
	Node0xaad1d88:s1 -> Node0xaad1db8;
	Node0xaad1db8 [shape=record,label="{lor.rhs55:                                        \l  %38 = load i32* %p_15.addr, align 4\l  %tobool56 = icmp ne i32 %38, 0\l  br label %lor.end57\l}"];
	Node0xaad1db8 -> Node0xaad1de8;
	Node0xaad1de8 [shape=record,label="{lor.end57:                                        \l  %39 = phi i1 [ true, %lor.end ], [ %tobool56, %lor.rhs55 ]\l  %lor.ext58 = zext i1 %39 to i32\l  %conv59 = trunc i32 %lor.ext58 to i8\l  %call60 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %conv39, i8\l... signext %conv59)\l  %conv61 = sext i8 %call60 to i64\l  %cmp62 = icmp ugt i64 %conv61, -8621102638428093876\l  %conv63 = zext i1 %cmp62 to i32\l  %40 = load i32* %p_15.addr, align 4\l  %conv64 = trunc i32 %40 to i16\l  %call65 = call signext i16 @safe_rshift_func_int16_t_s_u(i16 signext\l... %conv64, i32 14)\l  %conv66 = sext i16 %call65 to i32\l  %41 = load i32* %l_2821, align 4\l  %or67 = or i32 %conv66, %41\l  %conv68 = trunc i32 %or67 to i16\l  %42 = load i8* getelementptr inbounds ([2 x [8 x i8]]* @func_13.l_2786, i32\l... 0, i64 0, i64 7), align 1\l  %conv69 = zext i8 %42 to i32\l  %call70 = call signext i16 @safe_lshift_func_int16_t_s_u(i16 signext\l... %conv68, i32 %conv69)\l  %conv71 = sext i16 %call70 to i32\l  %cmp72 = icmp eq i32 %lor.ext, %conv71\l  %conv73 = zext i1 %cmp72 to i32\l  %43 = load i32* %l_2822, align 4\l  %conv74 = trunc i32 %43 to i16\l  %call75 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %conv30,\l... i16 zeroext %conv74)\l  %arrayidx76 = getelementptr inbounds [6 x i32]* %l_2793, i32 0, i64 2\l  %44 = load i32* %arrayidx76, align 4\l  %conv77 = sext i32 %44 to i64\l  %xor78 = xor i64 %conv77, 158950928\l  %conv79 = trunc i64 %xor78 to i32\l  %45 = load i32** @g_2050, align 8\l  store i32 %conv79, i32* %45, align 4\l  store i32 %conv79, i32* %p_15.addr, align 4\l  %46 = load i32*** %l_2823, align 8\l  %cmp80 = icmp ne i32** getelementptr inbounds ([7 x i32*]* @g_611, i32 0,\l... i64 2), %46\l  %conv81 = zext i1 %cmp80 to i32\l  %47 = load i32* %l_2822, align 4\l  %or82 = or i32 %47, %conv81\l  store i32 %or82, i32* %l_2822, align 4\l  %48 = load i8* getelementptr inbounds ([2 x [8 x i8]]* @func_13.l_2786, i32\l... 0, i64 1, i64 6), align 1\l  %call83 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext 1, i8\l... zeroext %48)\l  %conv84 = zext i8 %call83 to i16\l  %arrayidx85 = getelementptr inbounds [6 x i32]* %l_2793, i32 0, i64 2\l  %49 = load i32* %arrayidx85, align 4\l  %conv86 = trunc i32 %49 to i16\l  %call87 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %conv84,\l... i16 zeroext %conv86)\l  %conv88 = zext i16 %call87 to i32\l  %50 = load i32** @g_1613, align 8\l  store i32 %conv88, i32* %50, align 4\l  br label %if.end92\l}"];
	Node0xaad1de8 -> Node0xaad1ea8;
	Node0xaad1e18 [shape=record,label="{if.else89:                                        \l  %51 = load i16* %p_14.addr, align 2\l  %tobool90 = icmp ne i16 %51, 0\l  br i1 %tobool90, label %if.then91, label %if.end\l|{<s0>T|<s1>F}}"];
	Node0xaad1e18:s0 -> Node0xaad1e48;
	Node0xaad1e18:s1 -> Node0xaad1e78;
	Node0xaad1e48 [shape=record,label="{if.then91:                                        \l  br label %for.end98\l}"];
	Node0xaad1e48 -> Node0xaad1f68;
	Node0xaad1e78 [shape=record,label="{if.end:                                           \l  br label %if.end92\l}"];
	Node0xaad1e78 -> Node0xaad1ea8;
	Node0xaad1ea8 [shape=record,label="{if.end92:                                         \l  %52 = load i32* %p_15.addr, align 4\l  %tobool93 = icmp ne i32 %52, 0\l  br i1 %tobool93, label %if.then94, label %if.end95\l|{<s0>T|<s1>F}}"];
	Node0xaad1ea8:s0 -> Node0xaad1ed8;
	Node0xaad1ea8:s1 -> Node0xaad1f08;
	Node0xaad1ed8 [shape=record,label="{if.then94:                                        \l  br label %for.inc96\l}"];
	Node0xaad1ed8 -> Node0xaad1f38;
	Node0xaad1f08 [shape=record,label="{if.end95:                                         \l  br label %for.inc96\l}"];
	Node0xaad1f08 -> Node0xaad1f38;
	Node0xaad1f38 [shape=record,label="{for.inc96:                                        \l  %53 = load i64* @g_2389, align 8\l  %inc97 = add i64 %53, 1\l  store i64 %inc97, i64* @g_2389, align 8\l  br label %for.cond\l}"];
	Node0xaad1f38 -> Node0xaad1c08;
	Node0xaad1f68 [shape=record,label="{for.end98:                                        \l  br label %if.end99\l}"];
	Node0xaad1f68 -> Node0xaad1f98;
	Node0xaad1f98 [shape=record,label="{if.end99:                                         \l  %54 = load i16* %l_2863, align 2\l  %inc100 = add i16 %54, 1\l  store i16 %inc100, i16* %l_2863, align 2\l  %55 = load i32* %l_2861, align 4\l  %conv101 = trunc i32 %55 to i16\l  store i16 %conv101, i16* %retval\l  br label %return\l}"];
	Node0xaad1f98 -> Node0xaad1fc8;
	Node0xaad1fc8 [shape=record,label="{return:                                           \l  %56 = load i16* %retval\l  ret i16 %56\l}"];
}
