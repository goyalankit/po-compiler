digraph "CFG for 'func_55' function" {
	label="CFG for 'func_55' function";

	Node0xba3f7e8 [shape=record,label="{entry:\l  %p_56.addr = alloca i16, align 2\l  %p_57.addr = alloca i32**, align 8\l  %p_58.addr = alloca i32, align 4\l  %l_379 = alloca [6 x [8 x i32*]], align 16\l  %l_380 = alloca i32, align 4\l  %l_417 = alloca i64*, align 8\l  %l_429 = alloca [10 x [4 x [6 x i64*]]], align 16\l  %l_446 = alloca [7 x i8**], align 16\l  %l_450 = alloca i32, align 4\l  %l_554 = alloca i32, align 4\l  %l_648 = alloca i16*, align 8\l  %l_653 = alloca i32, align 4\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %k = alloca i32, align 4\l  %l_383 = alloca i32, align 4\l  %l_394 = alloca i16*, align 8\l  %l_404 = alloca i32, align 4\l  %l_407 = alloca i32, align 4\l  %l_411 = alloca i32, align 4\l  %l_412 = alloca [1 x i32], align 4\l  %l_498 = alloca i8*, align 8\l  %l_504 = alloca i8, align 1\l  %l_576 = alloca i8***, align 8\l  %l_636 = alloca i8, align 1\l  %i7 = alloca i32, align 4\l  store i16 %p_56, i16* %p_56.addr, align 2\l  store i32** %p_57, i32*** %p_57.addr, align 8\l  store i32 %p_58, i32* %p_58.addr, align 4\l  %0 = bitcast [6 x [8 x i32*]]* %l_379 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([6 x [8 x i32*]]*\l... @func_55.l_379 to i8*), i64 384, i32 16, i1 false)\l  store i32 674673577, i32* %l_380, align 4\l  store i64* getelementptr inbounds ([1 x [7 x i64]]* @g_235, i32 0, i64 0,\l... i64 0), i64** %l_417, align 8\l  %1 = bitcast [10 x [4 x [6 x i64*]]]* %l_429 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([10 x [4 x [6 x\l... i64*]]]* @func_55.l_429 to i8*), i64 1920, i32 16, i1 false)\l  %2 = bitcast [7 x i8**]* %l_446 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([7 x i8**]*\l... @func_55.l_446 to i8*), i64 56, i32 16, i1 false)\l  store i32 -1, i32* %l_450, align 4\l  store i32 -463893570, i32* %l_554, align 4\l  store i16* @g_470, i16** %l_648, align 8\l  store i32 -1241262455, i32* %l_653, align 4\l  %3 = load i32*** @g_376, align 8\l  store i32** %3, i32*** @g_376, align 8\l  %4 = load i32*** getelementptr inbounds ([1 x [8 x i32**]]* @func_55.l_378,\l... i32 0, i64 0, i64 7), align 8\l  %cmp = icmp ne i32** %3, %4\l  %conv = zext i1 %cmp to i32\l  %conv1 = trunc i32 %conv to i8\l  %5 = load i16* %p_56.addr, align 2\l  %conv2 = trunc i16 %5 to i8\l  %call = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %conv1, i8\l... zeroext %conv2)\l  %conv3 = zext i8 %call to i32\l  %6 = load i32* %l_380, align 4\l  %xor = xor i32 %6, %conv3\l  store i32 %xor, i32* %l_380, align 4\l  store i8 3, i8* @g_368, align 1\l  br label %for.cond\l}"];
	Node0xba3f7e8 -> Node0xba3f818;
	Node0xba3f818 [shape=record,label="{for.cond:                                         \l  %7 = load i8* @g_368, align 1\l  %conv4 = sext i8 %7 to i32\l  %cmp5 = icmp sge i32 %conv4, 0\l  br i1 %cmp5, label %for.body, label %for.end16\l|{<s0>T|<s1>F}}"];
	Node0xba3f818:s0 -> Node0xba3f848;
	Node0xba3f818:s1 -> Node0xba3f968;
	Node0xba3f848 [shape=record,label="{for.body:                                         \l  store i32 1054907632, i32* %l_383, align 4\l  store i16* null, i16** %l_394, align 8\l  store i32 -1, i32* %l_404, align 4\l  store i32 -1, i32* %l_407, align 4\l  store i32 -1, i32* %l_411, align 4\l  store i8* getelementptr inbounds ([3 x i8]* @g_45, i32 0, i64 1), i8**\l... %l_498, align 8\l  store i8 0, i8* %l_504, align 1\l  %arrayidx = getelementptr inbounds [7 x i8**]* %l_446, i32 0, i64 6\l  store i8*** %arrayidx, i8**** %l_576, align 8\l  store i8 0, i8* %l_636, align 1\l  store i32 0, i32* %i7, align 4\l  br label %for.cond8\l}"];
	Node0xba3f848 -> Node0xba3f878;
	Node0xba3f878 [shape=record,label="{for.cond8:                                        \l  %8 = load i32* %i7, align 4\l  %cmp9 = icmp slt i32 %8, 1\l  br i1 %cmp9, label %for.body11, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0xba3f878:s0 -> Node0xba3f8a8;
	Node0xba3f878:s1 -> Node0xba3f908;
	Node0xba3f8a8 [shape=record,label="{for.body11:                                       \l  %9 = load i32* %i7, align 4\l  %idxprom = sext i32 %9 to i64\l  %arrayidx12 = getelementptr inbounds [1 x i32]* %l_412, i32 0, i64 %idxprom\l  store i32 -1055907411, i32* %arrayidx12, align 4\l  br label %for.inc\l}"];
	Node0xba3f8a8 -> Node0xba3f8d8;
	Node0xba3f8d8 [shape=record,label="{for.inc:                                          \l  %10 = load i32* %i7, align 4\l  %inc = add nsw i32 %10, 1\l  store i32 %inc, i32* %i7, align 4\l  br label %for.cond8\l}"];
	Node0xba3f8d8 -> Node0xba3f878;
	Node0xba3f908 [shape=record,label="{for.end:                                          \l  br label %for.inc13\l}"];
	Node0xba3f908 -> Node0xba3f938;
	Node0xba3f938 [shape=record,label="{for.inc13:                                        \l  %11 = load i8* @g_368, align 1\l  %conv14 = sext i8 %11 to i32\l  %sub = sub nsw i32 %conv14, 1\l  %conv15 = trunc i32 %sub to i8\l  store i8 %conv15, i8* @g_368, align 1\l  br label %for.cond\l}"];
	Node0xba3f938 -> Node0xba3f818;
	Node0xba3f968 [shape=record,label="{for.end16:                                        \l  %bf.load = load i24* bitcast (\{ i8, i8, i8, i8 \}* @g_158 to i24*), align 4\l  %bf.shl = shl i24 %bf.load, 6\l  %bf.ashr = ashr i24 %bf.shl, 6\l  %bf.cast = sext i24 %bf.ashr to i32\l  %conv17 = trunc i32 %bf.cast to i16\l  %bf.load18 = load i24* bitcast (\{ i8, i8, i8, i8 \}* @g_307 to i24*), align 4\l  %bf.shl19 = shl i24 %bf.load18, 6\l  %bf.ashr20 = ashr i24 %bf.shl19, 6\l  %bf.cast21 = sext i24 %bf.ashr20 to i32\l  %call22 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext\l... %conv17, i32 %bf.cast21)\l  %conv23 = zext i16 %call22 to i32\l  %12 = load i16* %p_56.addr, align 2\l  %conv24 = sext i16 %12 to i32\l  %13 = load i16* %p_56.addr, align 2\l  %conv25 = sext i16 %13 to i32\l  %14 = load i16** %l_648, align 8\l  %15 = load i16* %14, align 2\l  %conv26 = zext i16 %15 to i32\l  %and = and i32 %conv26, %conv25\l  %conv27 = trunc i32 %and to i16\l  store i16 %conv27, i16* %14, align 2\l  %call28 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext\l... %conv27, i32 1)\l  %conv29 = zext i16 %call28 to i32\l  %xor30 = xor i32 %conv24, %conv29\l  %16 = load i16* %p_56.addr, align 2\l  %conv31 = trunc i16 %16 to i8\l  %call32 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %conv31,\l... i32 5)\l  %conv33 = zext i8 %call32 to i32\l  %17 = load i32* %l_653, align 4\l  %and34 = and i32 %17, %conv33\l  store i32 %and34, i32* %l_653, align 4\l  %18 = load i16* @g_223, align 2\l  %19 = load i8** @g_295, align 8\l  %20 = load i8* %19, align 1\l  %conv35 = sext i8 %20 to i32\l  %21 = load i32* %p_58.addr, align 4\l  %22 = load i8* getelementptr inbounds ([3 x i8]* @g_45, i32 0, i64 1), align\l... 1\l  %conv36 = sext i8 %22 to i32\l  %and37 = and i32 %conv36, %21\l  %conv38 = trunc i32 %and37 to i8\l  store i8 %conv38, i8* getelementptr inbounds ([3 x i8]* @g_45, i32 0, i64\l... 1), align 1\l  %conv39 = sext i8 %conv38 to i32\l  %cmp40 = icmp sgt i32 %conv35, %conv39\l  %conv41 = zext i1 %cmp40 to i32\l  %23 = load i32* @g_139, align 4\l  %and42 = and i32 %23, %conv41\l  store i32 %and42, i32* @g_139, align 4\l  %cmp43 = icmp ne i32 %and34, %and42\l  %conv44 = zext i1 %cmp43 to i32\l  %conv45 = trunc i32 %conv44 to i16\l  %24 = load i32* %p_58.addr, align 4\l  %bf.load46 = load i24* bitcast (\{ i8, i8, i8, i8 \}* @g_307 to i24*), align 4\l  %bf.shl47 = shl i24 %bf.load46, 6\l  %bf.ashr48 = ashr i24 %bf.shl47, 6\l  %bf.cast49 = sext i24 %bf.ashr48 to i32\l  %or = or i32 %24, %bf.cast49\l  %25 = load i32* %p_58.addr, align 4\l  %and50 = and i32 %or, %25\l  %conv51 = trunc i32 %and50 to i16\l  %call52 = call zeroext i16 @safe_mod_func_uint16_t_u_u(i16 zeroext %conv45,\l... i16 zeroext %conv51)\l  %conv53 = zext i16 %call52 to i64\l  %26 = load i64* getelementptr inbounds ([1 x [7 x i64]]* @g_235, i32 0, i64\l... 0, i64 1), align 8\l  %cmp54 = icmp ne i64 %conv53, %26\l  %conv55 = zext i1 %cmp54 to i32\l  %27 = load i32* @g_208, align 4\l  %cmp56 = icmp eq i32 %conv55, %27\l  %conv57 = zext i1 %cmp56 to i32\l  %cmp58 = icmp sge i32 %xor30, %conv57\l  %conv59 = zext i1 %cmp58 to i32\l  %call60 = call i32 @safe_add_func_int32_t_s_s(i32 %conv23, i32 %conv59)\l  %bf.load61 = load volatile i24* bitcast (\{ i8, i8, i8, i8 \}* @g_599 to\l... i24*), align 4\l  %bf.shl62 = shl i24 %bf.load61, 6\l  %bf.ashr63 = ashr i24 %bf.shl62, 6\l  %bf.cast64 = sext i24 %bf.ashr63 to i32\l  %xor65 = xor i32 %bf.cast64, %call60\l  %28 = trunc i32 %xor65 to i24\l  %bf.load66 = load volatile i24* bitcast (\{ i8, i8, i8, i8 \}* @g_599 to\l... i24*), align 4\l  %bf.value = and i24 %28, 262143\l  %bf.clear = and i24 %bf.load66, -262144\l  %bf.set = or i24 %bf.clear, %bf.value\l  store volatile i24 %bf.set, i24* bitcast (\{ i8, i8, i8, i8 \}* @g_599 to\l... i24*), align 4\l  %bf.result.shl = shl i24 %bf.value, 6\l  %bf.result.ashr = ashr i24 %bf.result.shl, 6\l  %bf.result.cast = sext i24 %bf.result.ashr to i32\l  %bf.load67 = load i24* bitcast (\{ i8, i8, i8, i8 \}* @g_307 to i24*), align 4\l  %bf.shl68 = shl i24 %bf.load67, 6\l  %bf.ashr69 = ashr i24 %bf.shl68, 6\l  %bf.cast70 = sext i24 %bf.ashr69 to i32\l  %conv71 = sext i32 %bf.cast70 to i64\l  ret i64 %conv71\l}"];
}
