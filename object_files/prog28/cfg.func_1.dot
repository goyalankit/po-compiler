digraph "CFG for 'func_1' function" {
	label="CFG for 'func_1' function";

	Node0xa521b40 [shape=record,label="{entry:\l  %l_9 = alloca [10 x i32], align 16\l  %l_10 = alloca i32*, align 8\l  %l_3801 = alloca i8*, align 8\l  %l_3804 = alloca i32*, align 8\l  %l_3805 = alloca [4 x [1 x i32*]], align 16\l  %l_3808 = alloca i64, align 8\l  %l_3809 = alloca i32, align 4\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %0 = bitcast [10 x i32]* %l_9 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([10 x i32]*\l... @func_1.l_9 to i8*), i64 40, i32 16, i1 false)\l  store i32* getelementptr inbounds ([8 x i32]* @g_11, i32 0, i64 1), i32**\l... %l_10, align 8\l  store i8* null, i8** %l_3801, align 8\l  store i32* @g_391, i32** %l_3804, align 8\l  store i64 -6928847524390404306, i64* %l_3808, align 8\l  store i32 -1263960411, i32* %l_3809, align 4\l  store i32 0, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0xa521b40 -> Node0xa521b70;
	Node0xa521b70 [shape=record,label="{for.cond:                                         \l  %1 = load i32* %i, align 4\l  %cmp = icmp slt i32 %1, 4\l  br i1 %cmp, label %for.body, label %for.end8\l|{<s0>T|<s1>F}}"];
	Node0xa521b70:s0 -> Node0xa521ba0;
	Node0xa521b70:s1 -> Node0xa521f50;
	Node0xa521ba0 [shape=record,label="{for.body:                                         \l  store i32 0, i32* %j, align 4\l  br label %for.cond1\l}"];
	Node0xa521ba0 -> Node0xa521bd0;
	Node0xa521bd0 [shape=record,label="{for.cond1:                                        \l  %2 = load i32* %j, align 4\l  %cmp2 = icmp slt i32 %2, 1\l  br i1 %cmp2, label %for.body3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0xa521bd0:s0 -> Node0xa521e90;
	Node0xa521bd0:s1 -> Node0xa521ef0;
	Node0xa521e90 [shape=record,label="{for.body3:                                        \l  %3 = load i32* %j, align 4\l  %idxprom = sext i32 %3 to i64\l  %4 = load i32* %i, align 4\l  %idxprom4 = sext i32 %4 to i64\l  %arrayidx = getelementptr inbounds [4 x [1 x i32*]]* %l_3805, i32 0, i64\l... %idxprom4\l  %arrayidx5 = getelementptr inbounds [1 x i32*]* %arrayidx, i32 0, i64\l... %idxprom\l  store i32* @g_1204, i32** %arrayidx5, align 8\l  br label %for.inc\l}"];
	Node0xa521e90 -> Node0xa521ec0;
	Node0xa521ec0 [shape=record,label="{for.inc:                                          \l  %5 = load i32* %j, align 4\l  %inc = add nsw i32 %5, 1\l  store i32 %inc, i32* %j, align 4\l  br label %for.cond1\l}"];
	Node0xa521ec0 -> Node0xa521bd0;
	Node0xa521ef0 [shape=record,label="{for.end:                                          \l  br label %for.inc6\l}"];
	Node0xa521ef0 -> Node0xa521f20;
	Node0xa521f20 [shape=record,label="{for.inc6:                                         \l  %6 = load i32* %i, align 4\l  %inc7 = add nsw i32 %6, 1\l  store i32 %inc7, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0xa521f20 -> Node0xa521b70;
	Node0xa521f50 [shape=record,label="{for.end8:                                         \l  %arrayidx9 = getelementptr inbounds [10 x i32]* %l_9, i32 0, i64 6\l  %7 = load i32* %arrayidx9, align 4\l  %conv = trunc i32 %7 to i16\l  %8 = load i32** %l_10, align 8\l  %9 = load i32* getelementptr inbounds ([8 x i32]* @g_11, i32 0, i64 7),\l... align 4\l  %10 = load i32** %l_10, align 8\l  %11 = load i32** %l_10, align 8\l  %12 = load i32* %11, align 4\l  %conv10 = sext i32 %12 to i64\l  %13 = load i16* getelementptr inbounds (%union.U0* @g_8, i32 0, i32 0),\l... align 2\l  %conv11 = zext i16 %13 to i64\l  %14 = load i32* getelementptr inbounds ([8 x i32]* @g_11, i32 0, i64 1),\l... align 4\l  %conv12 = sext i32 %14 to i64\l  %or = or i64 -1, %conv12\l  %cmp13 = icmp uge i64 %conv11, %or\l  %conv14 = zext i1 %cmp13 to i32\l  %conv15 = trunc i32 %conv14 to i8\l  %call = call signext i8 @safe_rshift_func_int8_t_s_u(i8 signext %conv15, i32\l... 5)\l  %conv16 = sext i8 %call to i64\l  %and = and i64 %conv16, -10\l  %conv17 = trunc i64 %and to i8\l  %15 = load i32** %l_10, align 8\l  %call18 = call i64 @func_26(i64 %conv10, i8 zeroext %conv17, i32* %15)\l  %call19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext -16598,\l... i32 14)\l  %conv20 = trunc i16 %call19 to i8\l  %arrayidx21 = getelementptr inbounds [10 x i32]* %l_9, i32 0, i64 6\l  %16 = load i32* %arrayidx21, align 4\l  %conv22 = sext i32 %16 to i64\l  %call23 = call zeroext i8 @func_20(i32* %10, i8 signext %conv20, i64 %conv22)\l  %17 = load i16* getelementptr inbounds (%union.U0* @g_8, i32 0, i32 0),\l... align 2\l  %conv24 = trunc i16 %17 to i8\l  %call25 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %call23, i8\l... zeroext %conv24)\l  %conv26 = zext i8 %call25 to i32\l  %18 = load i32** %l_10, align 8\l  %call27 = call signext i8 @func_14(i32 %conv26, i32* %18, i64\l... -2901143042242023587)\l  %conv28 = sext i8 %call27 to i32\l  %tobool = icmp ne i32 %conv28, 0\l  br i1 %tobool, label %lor.end, label %lor.rhs\l|{<s0>T|<s1>F}}"];
	Node0xa521f50:s0 -> Node0xa521fb0;
	Node0xa521f50:s1 -> Node0xa521f80;
	Node0xa521f80 [shape=record,label="{lor.rhs:                                          \l  %19 = load i8** @g_477, align 8\l  %20 = load volatile i8* %19, align 1\l  %conv29 = sext i8 %20 to i32\l  %tobool30 = icmp ne i32 %conv29, 0\l  br label %lor.end\l}"];
	Node0xa521f80 -> Node0xa521fb0;
	Node0xa521fb0 [shape=record,label="{lor.end:                                          \l  %21 = phi i1 [ true, %for.end8 ], [ %tobool30, %lor.rhs ]\l  %lor.ext = zext i1 %21 to i32\l  %conv31 = trunc i32 %lor.ext to i16\l  %call32 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext\l... %conv31, i32 8)\l  %conv33 = zext i16 %call32 to i64\l  %22 = load i64** @g_684, align 8\l  store i64 %conv33, i64* %22, align 8\l  %23 = load i32** %l_10, align 8\l  %24 = load i16* getelementptr inbounds (%union.U0* @g_8, i32 0, i32 0)\l  %call34 = call i32* @func_2(i16 %24, i16 zeroext %conv, i32* %8, i64\l... %conv33, i32* %23)\l  store i32* %call34, i32** %l_10, align 8\l  %25 = load i32** %l_10, align 8\l  %26 = load i32* %25, align 4\l  %27 = load i32** %l_10, align 8\l  %28 = load i32* %27, align 4\l  %29 = load i8** %l_3801, align 8\l  %cmp35 = icmp eq i8* null, %29\l  %conv36 = zext i1 %cmp35 to i32\l  %cmp37 = icmp ne i32 %28, %conv36\l  %conv38 = zext i1 %cmp37 to i32\l  %30 = load i32** %l_10, align 8\l  %31 = load i32* %30, align 4\l  %neg = xor i32 %31, -1\l  %32 = load i32** %l_10, align 8\l  %33 = load i32* %32, align 4\l  %tobool39 = icmp ne i32 %33, 0\l  br i1 %tobool39, label %lor.end43, label %lor.rhs40\l|{<s0>T|<s1>F}}"];
	Node0xa521fb0:s0 -> Node0xa522010;
	Node0xa521fb0:s1 -> Node0xa521fe0;
	Node0xa521fe0 [shape=record,label="{lor.rhs40:                                        \l  %34 = load i32** %l_10, align 8\l  %35 = load i32** %l_10, align 8\l  store i32* %35, i32** %l_3804, align 8\l  %cmp41 = icmp ne i32* %34, %35\l  br label %lor.end43\l}"];
	Node0xa521fe0 -> Node0xa522010;
	Node0xa522010 [shape=record,label="{lor.end43:                                        \l  %36 = phi i1 [ true, %lor.end ], [ %cmp41, %lor.rhs40 ]\l  %lor.ext44 = zext i1 %36 to i32\l  %37 = load i32** %l_10, align 8\l  %38 = load i32* %37, align 4\l  %call45 = call i32 @safe_add_func_uint32_t_u_u(i32 %lor.ext44, i32 %38)\l  %xor = xor i32 %neg, %call45\l  %cmp46 = icmp ule i32 %conv38, %xor\l  %conv47 = zext i1 %cmp46 to i32\l  %39 = load i8* @g_387, align 1\l  %conv48 = sext i8 %39 to i32\l  %cmp49 = icmp sgt i32 %conv47, %conv48\l  %conv50 = zext i1 %cmp49 to i32\l  %40 = load volatile i32** @g_176, align 8\l  %41 = load i32* %40, align 4\l  %or51 = or i32 %41, %conv50\l  store i32 %or51, i32* %40, align 4\l  %42 = load volatile i8* @g_3806, align 1\l  %43 = load %union.U0** getelementptr inbounds ([9 x %union.U0*]*\l... @func_1.l_3807, i32 0, i64 1), align 8\l  %44 = load %union.U0**** @g_1858, align 8\l  %45 = load %union.U0*** %44, align 8\l  %46 = load %union.U0** %45, align 8\l  %cmp52 = icmp ne %union.U0* %43, %46\l  %conv53 = zext i1 %cmp52 to i32\l  %47 = load i32** %l_10, align 8\l  %48 = load i32* %47, align 4\l  %xor54 = xor i32 %48, %conv53\l  store i32 %xor54, i32* %47, align 4\l  %conv55 = sext i32 %xor54 to i64\l  %49 = load i64* %l_3808, align 8\l  %and56 = and i64 %49, %conv55\l  store i64 %and56, i64* %l_3808, align 8\l  %50 = load i32* %l_3809, align 4\l  %conv57 = trunc i32 %50 to i8\l  ret i8 %conv57\l}"];
}
