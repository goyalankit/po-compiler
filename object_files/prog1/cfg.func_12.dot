digraph "CFG for 'func_12' function" {
	label="CFG for 'func_12' function";

	Node0xb6705d0 [shape=record,label="{entry:\l  %p_13.addr = alloca %union.U4*, align 8\l  %p_14 = alloca %union.U0, align 2\l  %p_15.addr = alloca i8*, align 8\l  %p_16.addr = alloca %union.U4*, align 8\l  %l_2775 = alloca i32, align 4\l  %l_2776 = alloca i16*, align 8\l  %l_2777 = alloca %union.U5, align 8\l  %l_2787 = alloca i64***, align 8\l  %l_2788 = alloca i64****, align 8\l  %l_2791 = alloca i64***, align 8\l  %l_2792 = alloca [2 x [3 x i32]], align 16\l  %i = alloca i32, align 4\l  %j = alloca i32, align 4\l  %agg.tmp.ensured = alloca %union.U2, align 8\l  store %union.U4* %p_13, %union.U4** %p_13.addr, align 8\l  %coerce.dive = getelementptr %union.U0* %p_14, i32 0, i32 0\l  store i16 %p_14.coerce, i16* %coerce.dive\l  store i8* %p_15, i8** %p_15.addr, align 8\l  store %union.U4* %p_16, %union.U4** %p_16.addr, align 8\l  store i32 63399574, i32* %l_2775, align 4\l  store i16* @g_1202, i16** %l_2776, align 8\l  %0 = bitcast %union.U5* %l_2777 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* getelementptr inbounds (\{\l... i8, [7 x i8] \}* @func_12.l_2777, i32 0, i32 0), i64 8, i32 8, i1 false)\l  store i64*** null, i64**** %l_2787, align 8\l  store i64**** %l_2787, i64***** %l_2788, align 8\l  store i64*** @g_383, i64**** %l_2791, align 8\l  store i32 0, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0xb6705d0 -> Node0xb670600;
	Node0xb670600 [shape=record,label="{for.cond:                                         \l  %1 = load i32* %i, align 4\l  %cmp = icmp slt i32 %1, 2\l  br i1 %cmp, label %for.body, label %for.end8\l|{<s0>T|<s1>F}}"];
	Node0xb670600:s0 -> Node0xb670630;
	Node0xb670600:s1 -> Node0xb670750;
	Node0xb670630 [shape=record,label="{for.body:                                         \l  store i32 0, i32* %j, align 4\l  br label %for.cond1\l}"];
	Node0xb670630 -> Node0xb670660;
	Node0xb670660 [shape=record,label="{for.cond1:                                        \l  %2 = load i32* %j, align 4\l  %cmp2 = icmp slt i32 %2, 3\l  br i1 %cmp2, label %for.body3, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0xb670660:s0 -> Node0xb670690;
	Node0xb670660:s1 -> Node0xb6706f0;
	Node0xb670690 [shape=record,label="{for.body3:                                        \l  %3 = load i32* %j, align 4\l  %idxprom = sext i32 %3 to i64\l  %4 = load i32* %i, align 4\l  %idxprom4 = sext i32 %4 to i64\l  %arrayidx = getelementptr inbounds [2 x [3 x i32]]* %l_2792, i32 0, i64\l... %idxprom4\l  %arrayidx5 = getelementptr inbounds [3 x i32]* %arrayidx, i32 0, i64 %idxprom\l  store i32 1, i32* %arrayidx5, align 4\l  br label %for.inc\l}"];
	Node0xb670690 -> Node0xb6706c0;
	Node0xb6706c0 [shape=record,label="{for.inc:                                          \l  %5 = load i32* %j, align 4\l  %inc = add nsw i32 %5, 1\l  store i32 %inc, i32* %j, align 4\l  br label %for.cond1\l}"];
	Node0xb6706c0 -> Node0xb670660;
	Node0xb6706f0 [shape=record,label="{for.end:                                          \l  br label %for.inc6\l}"];
	Node0xb6706f0 -> Node0xb670720;
	Node0xb670720 [shape=record,label="{for.inc6:                                         \l  %6 = load i32* %i, align 4\l  %inc7 = add nsw i32 %6, 1\l  store i32 %inc7, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0xb670720 -> Node0xb670600;
	Node0xb670750 [shape=record,label="{for.end8:                                         \l  %7 = load i32* %l_2775, align 4\l  %conv = trunc i32 %7 to i8\l  %8 = load i32* %l_2775, align 4\l  %conv9 = trunc i32 %8 to i8\l  %9 = load i8** %p_15.addr, align 8\l  store i8 %conv9, i8* %9, align 1\l  %call = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %conv, i8\l... signext %conv9)\l  %conv10 = sext i8 %call to i32\l  %10 = load i16** %l_2776, align 8\l  %11 = load i16** %l_2776, align 8\l  %cmp11 = icmp ne i16* %10, %11\l  %conv12 = zext i1 %cmp11 to i32\l  %cmp13 = icmp sgt i32 %conv10, %conv12\l  %conv14 = zext i1 %cmp13 to i32\l  %conv15 = trunc i32 %conv14 to i8\l  %12 = bitcast %union.U2* %agg.tmp.ensured to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* bitcast (%union.U2*\l... getelementptr inbounds ([9 x %union.U2]* bitcast (\<\{ \{ i8, [7 x i8] \}, \{ i8,\l... [7 x i8] \}, \{ i8, [7 x i8] \}, \{ i8, [7 x i8] \}, \{ i8, [7 x i8] \}, \{ i8, [7 x\l... i8] \}, \{ i8, [7 x i8] \}, \{ i8, [7 x i8] \}, \{ i8, [7 x i8] \} \}\>* @g_2786 to [9\l... x %union.U2]*), i32 0, i64 5) to i8*), i64 8, i32 8, i1 true)\l  %13 = load i64**** %l_2787, align 8\l  %14 = load i64***** %l_2788, align 8\l  store i64*** %13, i64**** %14, align 8\l  %f0 = bitcast %union.U0* %p_14 to i16*\l  %15 = load i16* %f0, align 2\l  %conv16 = zext i16 %15 to i64\l  %and = and i64 -10, %conv16\l  %conv17 = trunc i64 %and to i8\l  %call18 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %conv17, i8\l... zeroext 7)\l  %conv19 = zext i8 %call18 to i64\l  %cmp20 = icmp ne i64 %conv19, 1\l  %conv21 = zext i1 %cmp20 to i32\l  %16 = load i64**** %l_2791, align 8\l  %cmp22 = icmp eq i64*** %13, %16\l  %conv23 = zext i1 %cmp22 to i32\l  %conv24 = trunc i32 %conv23 to i8\l  %call25 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %conv24, i8\l... zeroext -24)\l  %f026 = bitcast %union.U5* %l_2777 to i8*\l  %17 = load i8* %f026, align 1\l  %call27 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %call25, i8\l... signext %17)\l  %conv28 = sext i8 %call27 to i32\l  %f029 = bitcast %union.U0* %p_14 to i16*\l  %18 = load i16* %f029, align 2\l  %conv30 = zext i16 %18 to i32\l  %call31 = call i32 @safe_sub_func_uint32_t_u_u(i32 %conv28, i32 %conv30)\l  %conv32 = trunc i32 %call31 to i16\l  %19 = load i8* getelementptr inbounds (\{ i8, [7 x i8] \}* @g_1441, i32 0, i32\l... 0), align 1\l  %conv33 = zext i8 %19 to i32\l  %call34 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext\l... %conv32, i32 %conv33)\l  %conv35 = sext i16 %call34 to i32\l  %call36 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %conv15,\l... i32 %conv35)\l  %conv37 = zext i8 %call36 to i32\l  %arrayidx38 = getelementptr inbounds [2 x [3 x i32]]* %l_2792, i32 0, i64 1\l  %arrayidx39 = getelementptr inbounds [3 x i32]* %arrayidx38, i32 0, i64 0\l  %20 = load i32* %arrayidx39, align 4\l  %or = or i32 %20, %conv37\l  store i32 %or, i32* %arrayidx39, align 4\l  %21 = load %union.U4** %p_13.addr, align 8\l  ret %union.U4* %21\l}"];
}
