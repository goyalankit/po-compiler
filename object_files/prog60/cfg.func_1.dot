digraph "CFG for 'func_1' function" {
	label="CFG for 'func_1' function";

	Node0x9e1c740 [shape=record,label="{entry:\l  %l_27 = alloca i32, align 4\l  %l_28 = alloca i16*, align 8\l  %l_31 = alloca i16*, align 8\l  %l_43 = alloca i8*, align 8\l  store i32 -5, i32* %l_27, align 4\l  store i16* @g_29, i16** %l_28, align 8\l  store i16* getelementptr inbounds ([6 x i16]* @g_32, i32 0, i64 3), i16**\l... %l_31, align 8\l  store i8* @g_44, i8** %l_43, align 8\l  %0 = load i32* @g_9, align 4\l  %1 = load i32* @g_9, align 4\l  %conv = sext i32 %1 to i64\l  %2 = load i32* @g_9, align 4\l  %call = call zeroext i16 @func_18(i32 %2)\l  %3 = load i32* %l_27, align 4\l  %conv1 = trunc i32 %3 to i16\l  %4 = load i16** %l_28, align 8\l  store i16 %conv1, i16* %4, align 2\l  %conv2 = sext i16 %conv1 to i32\l  %5 = load i16* @g_30, align 2\l  %conv3 = sext i16 %5 to i32\l  %xor = xor i32 %conv3, %conv2\l  %conv4 = trunc i32 %xor to i16\l  store i16 %conv4, i16* @g_30, align 2\l  %6 = load i16** %l_31, align 8\l  store i16 %conv4, i16* %6, align 2\l  %conv5 = sext i16 %conv4 to i32\l  %7 = load i32* @g_9, align 4\l  %conv6 = sext i32 %7 to i64\l  %cmp = icmp slt i64 3943305586, %conv6\l  %conv7 = zext i1 %cmp to i32\l  %8 = load i32* %l_27, align 4\l  %conv8 = sext i32 %8 to i64\l  %9 = load i32* @g_9, align 4\l  %call9 = call zeroext i16 @func_18(i32 %9)\l  %cmp10 = icmp sgt i64 %conv8, 229\l  %conv11 = zext i1 %cmp10 to i32\l  %cmp12 = icmp sgt i32 %conv7, %conv11\l  %conv13 = zext i1 %cmp12 to i32\l  %neg = xor i32 %conv13, -1\l  %10 = load volatile i32*** getelementptr inbounds ([5 x i32**]* @g_41, i32\l... 0, i64 3), align 8\l  %11 = bitcast i32** %10 to i8*\l  %cmp14 = icmp ne i8* null, %11\l  %conv15 = zext i1 %cmp14 to i32\l  %conv16 = trunc i32 %conv15 to i16\l  %call17 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext\l... %conv16, i32 11)\l  %conv18 = trunc i16 %call17 to i8\l  %12 = load i32* %l_27, align 4\l  %call19 = call signext i8 @safe_rshift_func_int8_t_s_u(i8 signext %conv18,\l... i32 %12)\l  %call20 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %call19, i8\l... zeroext 106)\l  %conv21 = zext i8 %call20 to i32\l  %cmp22 = icmp slt i32 %conv5, %conv21\l  %conv23 = zext i1 %cmp22 to i32\l  %call24 = call i32 @safe_div_func_int32_t_s_s(i32 %conv23, i32 -679491617)\l  %conv25 = trunc i32 %call24 to i16\l  %call26 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %conv25,\l... i16 zeroext -3131)\l  %13 = load i16* getelementptr inbounds ([6 x i16]* @g_32, i32 0, i64 2),\l... align 2\l  %conv27 = sext i16 %13 to i32\l  %14 = load i32* @g_9, align 4\l  %cmp28 = icmp sle i32 %conv27, %14\l  %conv29 = zext i1 %cmp28 to i32\l  %15 = load i32* %l_27, align 4\l  %cmp30 = icmp sge i32 %conv29, %15\l  %conv31 = zext i1 %cmp30 to i32\l  %conv32 = sext i32 %conv31 to i64\l  %or = or i64 %conv32, 1\l  %16 = load i32* @g_9, align 4\l  %conv33 = sext i32 %16 to i64\l  %cmp34 = icmp sge i64 %or, %conv33\l  %conv35 = zext i1 %cmp34 to i32\l  %17 = load i8** %l_43, align 8\l  %18 = load i8* %17, align 1\l  %conv36 = sext i8 %18 to i32\l  %or37 = or i32 %conv36, %conv35\l  %conv38 = trunc i32 %or37 to i8\l  store i8 %conv38, i8* %17, align 1\l  %conv39 = sext i8 %conv38 to i32\l  %19 = load i32* %l_27, align 4\l  %and = and i32 %conv39, %19\l  %conv40 = trunc i32 %and to i8\l  %call41 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %conv40, i8\l... zeroext -78)\l  %conv42 = zext i8 %call41 to i64\l  %call43 = call i64 @safe_mod_func_int64_t_s_s(i64 %conv, i64 %conv42)\l  %conv44 = trunc i64 %call43 to i8\l  %call45 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %conv44, i8\l... zeroext -16)\l  %conv46 = zext i8 %call45 to i16\l  %20 = load i32* @g_9, align 4\l  %call47 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext\l... %conv46, i32 %20)\l  %conv48 = zext i16 %call47 to i32\l  %21 = load i32* @g_9, align 4\l  %or49 = or i32 %conv48, %21\l  %22 = load i32* @g_9, align 4\l  %cmp50 = icmp sgt i32 %or49, %22\l  %conv51 = zext i1 %cmp50 to i32\l  %23 = load i32* %l_27, align 4\l  %and52 = and i32 %conv51, %23\l  %cmp53 = icmp ne i32 %0, %and52\l  %conv54 = zext i1 %cmp53 to i32\l  %24 = load i32* %l_27, align 4\l  %or55 = or i32 %conv54, %24\l  %25 = load i32* %l_27, align 4\l  %cmp56 = icmp sle i32 %or55, %25\l  %conv57 = zext i1 %cmp56 to i32\l  %conv58 = trunc i32 %conv57 to i8\l  %call59 = call zeroext i8 @safe_unary_minus_func_uint8_t_u(i8 zeroext\l... %conv58)\l  %26 = load i32* @g_9, align 4\l  %conv60 = trunc i32 %26 to i16\l  %27 = load i32* @g_9, align 4\l  %conv61 = trunc i32 %27 to i16\l  %28 = load i32* @g_9, align 4\l  %29 = load i32* %l_27, align 4\l  %call62 = call i64 @func_2(i8 zeroext %call59, i16 signext %conv60, i16\l... signext %conv61, i32 %28, i32 %29)\l  %30 = load i32* %l_27, align 4\l  %conv63 = sext i32 %30 to i64\l  %cmp64 = icmp ugt i64 %call62, %conv63\l  %conv65 = zext i1 %cmp64 to i32\l  %31 = load i32*** @g_630, align 8\l  %32 = load i32** %31, align 8\l  store i32 %conv65, i32* %32, align 4\l  %33 = load i8* @g_859, align 1\l  %conv66 = zext i8 %33 to i32\l  ret i32 %conv66\l}"];
}
