##!/work/02681/ankitg/programs/bin/ruby
#/bin/ruby
#require 'pry'
require 'open3'

$filename = ARGV[0]

abort("Usage: gdo <input file(.c)>") if ARGV[0].nil?

$target_passes = [ 
    "-loop-unroll", 
    "-loop-unswitch", 
    "-memcpyopt" , 
    "-reassociate" , 
    "-sccp" , 
    "-bb-vectorize", 
    "-die", 
    "-dse", 
    "-inline", 
    "-licm", 
    "-loop-rotate"
]                


$pass_map = {
    "-loop-unroll" => "0" , 
    "-loop-unswitch" => "1", 
    "-memcpyopt" => "2", 
    "-reassociate" => "3" , 
    "-sccp" => "4" , 
    "-bb-vectorize" => "5", 
    "-die" => "6", 
    "-dse" => "7", 
    "-inline" => "8", 
    "-licm" => "9", 
    "-loop-rotate" => "10",
    " " => "11"
}


def get_pass_array
    cmd = "clang -O3 -emit-llvm -c #{$filename}  -mllvm --debug-pass=Arguments -o temp.o -I/scratch/02681/natviv/workspace/benchmark-search/C/csmith/runtime/ -w"
    output = ""

    begin
        Open3.popen3(cmd) do |stdin, stdout, stderr, wait_thr|
            output = stderr.read
        end

        %x(rm -rf temp.o)
    rescue Exception => ex
        puts ex.message
        puts "Run: module load llvm"
        abort
    end

    if output.include?("clang: error: no such file or directory")
        abort("#{$filename} doesn't exist\nExact error: "+output)
    end
    p_args = output.split("\n").select { |a| a.include?("Pass Arguments") }
    p_args.map {|i| i.gsub("Pass Arguments: ", "").split(" ")}
end


def default_pass_priority_map
    pass_priority = {}
    counter = 0
    get_pass_array.each do |pass_a|
        pass_a.each do |pass|
            next unless pass_priority[pass].nil?
            pass_priority[pass] = counter
            counter += 1
        end
    end
    pass_priority
end

def default_order
    dppm = default_pass_priority_map
    dppm.delete_if {|n, p| !$target_passes.include?(n) }
    dppm.sort_by {|k,v| v}.map {|k| k[0]}
end

result = default_order

puts "#{result.count} passes found", ""
p result + [" "]
puts ""

p result.collect {|i| $pass_map[i]}
